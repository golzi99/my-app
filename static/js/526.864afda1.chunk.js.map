{"version":3,"file":"static/js/526.864afda1.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/common/LoginForm/LoginFormCss.module.css?b93a","components/common/LoginForm/LoginForm.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx","components/Utils/Validators/validators.js","components/common/SimpleForms/SimpleForms.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"LoginFormCss_loginForm__rrQh4\",\"summaryError\":\"LoginFormCss_summaryError__f3Kna\",\"error\":\"LoginFormCss_error__rywIP\"};","import LoginFormCss from \"./LoginFormCss.module.css\"\r\nimport {useFormikContext} from \"formik\";\r\nimport {createField} from \"../SimpleForms/SimpleForms\";\r\n\r\nexport function LoginForm({apiError, captchaUrl}) {\r\n\r\n    const formik = useFormikContext();\r\n\r\n    let hasErrorEmail = formik.errors.email && formik.touched.email;\r\n    let hasErrorPassword = formik.errors.password && formik.touched.password;\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} className={LoginFormCss.loginForm}>\r\n            <div className={hasErrorEmail && LoginFormCss.error}>\r\n                <label htmlFor=\"email\">Email: </label>\r\n                {createField(\"email\", \"email\", \"email\", \"\",\"input\", formik.values.email)}\r\n                {hasErrorEmail && <div>{formik.errors.email}</div>}\r\n            </div>\r\n            <div className={hasErrorPassword && LoginFormCss.error}>\r\n                <label htmlFor=\"password\">Password: </label>\r\n                {createField(\"password\", \"password\", \"password\", \"\", \"input\", formik.values.password)}\r\n                {hasErrorPassword && <div>{formik.errors.password}</div>}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"rememberMe\">Remember Me </label>\r\n                {createField(\"checkbox\", \"checkbox\", \"rememberMe\")}\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Login</button>\r\n            </div>\r\n            {captchaUrl && <img alt={\"captcha\"} src={captchaUrl}/>}\r\n            {captchaUrl && createField(\"captchaSymbols\", \"captcha\", \"captcha\", \"Enter captcha symbols\", \"input\", formik.values.captcha)}\r\n            {apiError ? <div className={LoginFormCss.summaryError}>{apiError}</div> : null}\r\n        </form>\r\n    );\r\n}","import {LoginForm} from \"../common/LoginForm/LoginForm\";\r\n\r\nexport function Login({apiError, captchaUrl}) {\r\n\r\n    return (\r\n        <div>\r\n            <LoginForm apiError={apiError} captchaUrl={captchaUrl}></LoginForm>\r\n        </div>\r\n    );\r\n}","import {connect} from \"react-redux\";\r\nimport {Login} from \"./Login\";\r\nimport {FormikProvider, useFormik} from \"formik\";\r\nimport {LoginErrorSchema} from \"../Utils/Validators/validators\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {authLoginUser} from \"../../redux/auth-reducer\";\r\nimport {resetProf} from \"../../redux/profile-reducer\";\r\n\r\nfunction LoginContainer({resetProf, authLoginUser, isAuth, captchaUrl}) {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        validationSchema: LoginErrorSchema,\r\n        onSubmit:\r\n            (values, submitProps) => {\r\n                let userLoginData = {\r\n                    email: values.email,\r\n                    password: values.password,\r\n                    rememberMe: values.rememberMe,\r\n                    captcha: values.captcha\r\n                }\r\n                resetProf();\r\n                authLoginUser(userLoginData, submitProps.setStatus);\r\n                submitProps.resetForm();\r\n            }\r\n    })\r\n\r\n    let apiErrors;\r\n    if(formik.status) {\r\n        apiErrors = formik.status.error.map((item, index) => <p key={index}>{item}</p>);\r\n    }\r\n\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <div>\r\n                {isAuth ? <Navigate to={\"/profile\"}/> :\r\n                    <Login apiError={apiErrors} captchaUrl={captchaUrl}></Login>}\r\n            </div>\r\n        </FormikProvider>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n});\r\n\r\nexport default connect(mapStateToProps, {authLoginUser, resetProf})(LoginContainer)","import * as Yup from 'yup';\r\n\r\nexport const LoginErrorSchema = Yup.object().shape({\r\n    email: Yup.string().email('Invalid email').required('Required email'),\r\n    password: Yup.string().required('Required password'),\r\n    captcha: Yup.string().when(\"captchaUrl\", {\r\n        is: true,\r\n        then: Yup.string().required(\"Required captcha symbols\")\r\n    })\r\n});\r\n\r\nexport const PostSchema = Yup.object().shape({\r\n    newTextBody: Yup.string()\r\n        .max(100, 'Too Long!')\r\n        .required('Required')\r\n});\r\n\r\nexport const MessageSchema = Yup.object().shape({\r\n    newTextBody: Yup.string()\r\n        .required('Required')\r\n});\r\n\r\n// export const WebSiteSchema = Yup.object().shape({\r\n//     contacts: Yup.object().shape({\r\n//         facebook: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         website: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         vk: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         twitter: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         instagram: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         youtube: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         github: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         mainLink: Yup.string().url(\"Wrong url!\").nullable(),\r\n//     })\r\n// });\r\n\r\nexport const WebSiteSchema = Yup.object().shape({\r\n        facebook: Yup.string().url(\"Wrong url!\").nullable(),\r\n        website: Yup.string().url(\"Wrong url!\").nullable(),\r\n        vk: Yup.string().url(\"Wrong url!\").nullable(),\r\n        twitter: Yup.string().url(\"Wrong url!\").nullable(),\r\n        instagram: Yup.string().url(\"Wrong url!\").nullable(),\r\n        youtube: Yup.string().url(\"Wrong url!\").nullable(),\r\n        github: Yup.string().url(\"Wrong url!\").nullable(),\r\n        mainLink: Yup.string().url(\"Wrong url!\").nullable(),\r\n});","import {Field} from \"formik\";\r\n\r\nexport const createField = (type, id, name, placeholder, component, value) => {\r\n    let checked;\r\n    if (type === \"checkbox\") {\r\n        checked = value;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Field type={type}\r\n                   id={id}\r\n                   name={name}\r\n                   placeholder={placeholder}\r\n                   value={value || \"\"}\r\n                   checked={checked}\r\n                   component={component}/>\r\n        </div>\r\n);\r\n}"],"names":["LoginForm","_ref","apiError","captchaUrl","formik","useFormikContext","hasErrorEmail","errors","email","touched","hasErrorPassword","password","_jsxs","onSubmit","handleSubmit","className","LoginFormCss","loginForm","children","error","_jsx","htmlFor","createField","values","type","alt","src","captcha","summaryError","Login","connect","state","isAuth","auth","authLoginUser","resetProf","useFormik","initialValues","rememberMe","validationSchema","LoginErrorSchema","submitProps","userLoginData","setStatus","resetForm","apiErrors","status","map","item","index","FormikProvider","value","Navigate","to","Yup","shape","required","when","is","then","PostSchema","newTextBody","max","MessageSchema","WebSiteSchema","facebook","url","nullable","website","vk","twitter","instagram","youtube","github","mainLink","id","name","placeholder","component","checked","Field"],"sourceRoot":""}