{"version":3,"file":"static/js/712.e096603c.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/common/LoginForm/LoginFormCss.module.css?b93a","components/common/SimpleForms/SimpleForms.js","components/common/LoginForm/LoginForm.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx","components/Utils/Validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"LoginFormCss_loginForm__rrQh4\",\"summaryError\":\"LoginFormCss_summaryError__f3Kna\",\"error\":\"LoginFormCss_error__rywIP\"};","import {Field} from \"formik\";\r\n\r\nexport const createField = (type, id, name, component) => {\r\n    return (<Field type={type}\r\n                   id={id}\r\n                   name={name}\r\n                   component={component}/>);\r\n}","import LoginFormCss from \"./LoginFormCss.module.css\"\r\nimport {useFormikContext} from \"formik\";\r\nimport {createField} from \"../SimpleForms/SimpleForms\";\r\n\r\nexport function LoginForm({apiError}) {\r\n\r\n    const formik = useFormikContext();\r\n\r\n    let hasErrorEmail = formik.errors.email && formik.touched.email;\r\n    let hasErrorPassword = formik.errors.password && formik.touched.password;\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} className={LoginFormCss.loginForm}>\r\n            <div className={hasErrorEmail && LoginFormCss.error}>\r\n                <label htmlFor=\"email\">Email: </label>\r\n                {createField(\"email\", \"email\", \"email\", \"input\")}\r\n                {hasErrorEmail && <div>{formik.errors.email}</div>}\r\n            </div>\r\n            <div className={hasErrorPassword && LoginFormCss.error}>\r\n                <label htmlFor=\"password\">Password: </label>\r\n                {createField(\"password\", \"password\", \"password\", \"input\")}\r\n                {hasErrorPassword && <div>{formik.errors.password}</div>}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"rememberMe\">Remember Me </label>\r\n                {createField(\"checkbox\", \"checkbox\", \"rememberMe\")}\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Login</button>\r\n            </div>\r\n            {apiError ? <div className={LoginFormCss.summaryError}>{apiError}</div> : null}\r\n        </form>\r\n    );\r\n}","import {LoginForm} from \"../common/LoginForm/LoginForm\";\r\n\r\nexport function Login({apiError}) {\r\n\r\n    return (\r\n        <div>\r\n            <LoginForm apiError={apiError}></LoginForm>\r\n        </div>\r\n    );\r\n}","import {connect} from \"react-redux\";\r\nimport {Login} from \"./Login\";\r\nimport {FormikProvider, useFormik} from \"formik\";\r\nimport {EmailErrorSchema} from \"../Utils/Validators/validators\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {authLoginUser} from \"../../redux/auth-reducer\";\r\nimport {resetProf} from \"../../redux/profile-reducer\";\r\n\r\nfunction LoginContainer({resetProf, authLoginUser, isAuth}) {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: false\r\n        },\r\n        validationSchema: EmailErrorSchema,\r\n        onSubmit:\r\n            (values, submitProps) => {\r\n                let userLoginData = {\r\n                    email: values.email,\r\n                    password: values.password,\r\n                    rememberMe: values.rememberMe,\r\n                    captcha: values.captcha\r\n                }\r\n                resetProf();\r\n                authLoginUser(userLoginData, submitProps.setStatus);\r\n                submitProps.resetForm();\r\n            }\r\n    })\r\n\r\n    let apiErrors;\r\n    if(formik.status) {\r\n        apiErrors = formik.status.error.map((item, index) => <p key={index}>{item}</p>);\r\n    }\r\n\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <div>\r\n                {isAuth ? <Navigate to={\"/ProfileInfo\"}/> :\r\n                    <Login apiError={apiErrors}></Login>}\r\n            </div>\r\n        </FormikProvider>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, {authLoginUser, resetProf})(LoginContainer)","import * as Yup from 'yup';\r\n\r\nexport const EmailErrorSchema = Yup.object().shape({\r\n    email: Yup.string().email('Invalid email').required('Required email'),\r\n    password: Yup.string().required('Required password')\r\n});\r\n\r\nexport const PostSchema = Yup.object().shape({\r\n    newTextBody: Yup.string()\r\n        .max(100, 'Too Long!')\r\n        .required('Required')\r\n});\r\n\r\nexport const MessageSchema = Yup.object().shape({\r\n    newTextBody: Yup.string()\r\n        .required('Required')\r\n});"],"names":["createField","type","id","name","component","_jsx","Field","LoginForm","_ref","apiError","formik","useFormikContext","hasErrorEmail","errors","email","touched","hasErrorPassword","password","_jsxs","onSubmit","handleSubmit","className","LoginFormCss","loginForm","children","error","htmlFor","summaryError","Login","connect","state","isAuth","auth","authLoginUser","resetProf","useFormik","initialValues","rememberMe","captcha","validationSchema","EmailErrorSchema","values","submitProps","userLoginData","setStatus","resetForm","apiErrors","status","map","item","index","FormikProvider","value","Navigate","to","Yup","shape","required","PostSchema","newTextBody","max","MessageSchema"],"sourceRoot":""}