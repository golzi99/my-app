{"version":3,"file":"static/js/369.23b97e7f.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileData/ProfileData.js","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileData/ProfileDataCss.module.css?8981","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/Utils/Validators/validators.js","webpack://my-app/./src/components/common/PostSmtForm/PostSmtFormCss.module.css?c58e","components/common/PostSmtForm/PostSmtFormFormik.jsx","components/common/SimpleForms/SimpleForms.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__-b6rx\",\"profileImg\":\"ProfileInfo_profileImg__LbHdN\",\"contact\":\"ProfileInfo_contact__Y3JFV\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatus = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const _activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const _deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const _onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.isOwner ?\r\n                <div>\r\n                    {!editMode ?\r\n                        <div>\r\n                            <b>Status: </b><span onDoubleClick={_activateEditMode}>{props.status || \"-------------\"}</span>\r\n                        </div> :\r\n                        <div>\r\n                            <input onChange={_onStatusChange} autoFocus={true} onBlur={_deactivateEditMode}\r\n                                   value={status}/>\r\n                        </div>}\r\n                </div>\r\n                :\r\n                <div>\r\n                    <b>Status: </b><span>{props.status || \"-------------\"}</span>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;","import ProfileInfoCss from \"../ProfileInfo.module.css\";\r\nimport React from \"react\";\r\n\r\nfunction ProfileData({profile}) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            {profile.aboutMe &&\r\n                <div>\r\n                    <b>About me:</b> {profile.aboutMe}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Contact:</b>\r\n                {Object.entries(profile.contacts).map(([contactTitle, contactValue]) => {\r\n                    if (contactValue) {\r\n                        return (<div key={contactTitle} className={ProfileInfoCss.contact}>\r\n                            <b>{contactTitle}:</b> {contactValue}\r\n                        </div>);\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileData;","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ProfileDataCss_contact__m7RLo\"};","import React from \"react\";\r\nimport {createField} from \"../../../common/SimpleForms/SimpleForms\";\r\nimport {useFormikContext} from \"formik\";\r\nimport ProfileDataCss from \"./ProfileDataCss.module.css\"\r\n\r\nfunction ProfileDataForm({profile}) {\r\n    const formik = useFormikContext();\r\n\r\n    // let hasErrorFullName = formik.errors.fullName && formik.touched.fullName;\r\n\r\n    // let hasErrorContactFacebook = formik.errors.facebook && formik.touched.facebook;\r\n    // let hasErrorContactWebsite = formik.errors.website && formik.touched.website;\r\n    // let hasErrorContactVk = formik.errors.vk && formik.touched.vk;\r\n    // let hasErrorContactTwitter = formik.errors.twitter && formik.touched.twitter;\r\n    // let hasErrorContactInstagram = formik.errors.instagram && formik.touched.instagram;\r\n    // let hasErrorContactYoutube = formik.errors.youtube && formik.touched.youtube;\r\n    // let hasErrorContactGithub = formik.errors.github && formik.touched.github;\r\n    // let hasErrorContactMainLink = formik.errors.mainLink && formik.touched.mainLink;\r\n\r\n    let apiErrors;\r\n    if(formik.status) {\r\n        apiErrors = formik.status.errors.map((item, index) => <p key={index}>{item}</p>);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"fullName\">\r\n                    <b>Full name: </b>\r\n                </label>\r\n                {createField(\"fullName\", \"fullName\", \"fullName\", \"Full Name\", \"input\", formik.values.fullName)}\r\n                {/*{hasErrorFullName && <div>{formik.errors.fullName}</div>}*/}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"lookingForAJob\">\r\n                    Looking for a job:\r\n                </label>\r\n                {createField(\"checkbox\", \"lookingForAJob\", \"lookingForAJob\", '', \"\", formik.values.lookingForAJob)}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"lookingForAJobDescription\">\r\n                    <b>My professional skills: </b>\r\n                </label>\r\n                {createField(\"lookingForAJobDescription\", \"lookingForAJobDescription\", \"lookingForAJobDescription\",\r\n                    'Your professional skills...', \"textarea\", formik.values.lookingForAJobDescription)}\r\n                {/*{hasErrorEmail && <div>{formik.errors.email}</div>}*/}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"aboutMe\">\r\n                    <b>About me: </b>\r\n                </label>\r\n                {createField(\"aboutMe\", \"aboutMe\", \"aboutMe\", \"About you...\", \"textarea\", formik.values.aboutMe)}\r\n                {/*{hasErrorEmail && <div>{formik.errors.email}</div>}*/}\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    <b>Contacts:</b>\r\n                </label>\r\n                <div>\r\n                    {Object.entries(profile.contacts).map(([contactTitle, contactValue]) => {\r\n                        return (\r\n                            <div key={contactTitle} className={ProfileDataCss.contact}>\r\n                                <label htmlFor={contactTitle}>\r\n                                    <b>{contactTitle}: </b>\r\n                                </label>\r\n                                {createField(contactTitle, `contacts.` + contactTitle, `contacts.` + contactTitle, contactTitle, \"input\", formik.values.contacts[contactTitle])}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <button type={\"submit\"}>SAVE</button>\r\n            {apiErrors && <div>{apiErrors}</div>}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileDataForm;","import ProfileInfoCss from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preLoader/preloader\";\r\nimport React, {useState} from \"react\";\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport nonProfileImg from \"@assets/img/noProfilePictureIcon.png\"\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport ProfileDataForm from \"./ProfileData/ProfileDataForm\";\r\nimport {FormikProvider, useFormik} from \"formik\";\r\nimport {WebSiteSchema} from \"../../Utils/Validators/validators\";\r\n\r\nexport function ProfileInfo({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: profile.contacts,\r\n        },\r\n        validationSchema: WebSiteSchema,\r\n        onSubmit:\r\n             async (values, submitProps) => {\r\n                let profileData = {\r\n                    fullName: values.fullName,\r\n                    lookingForAJob: values.lookingForAJob,\r\n                    lookingForAJobDescription: values.lookingForAJobDescription,\r\n                    aboutMe: values.aboutMe,\r\n                    contacts: values.contacts\r\n                };\r\n                 // saveProfile(profileData, submitProps.setStatus).then(()=> {\r\n                 //     setEditMode(false);\r\n                 // }).catch(() => {\r\n                 //\r\n                 // });\r\n                await saveProfile(profileData, submitProps.setStatus);\r\n                setEditMode(false);\r\n            }\r\n    });\r\n\r\n    if (!profile) {\r\n        return (<Preloader></Preloader>);\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={ProfileInfoCss.descriptionBlock}>\r\n                <div className={ProfileInfoCss.avatarEditable}>\r\n                    {isOwner ?\r\n                        <label role={\"button\"} title={\"Edit your profile photo\"}>\r\n                            <input type={\"file\"} accept={\"image/png, image/jpeg\"} style={{display: \"none\"}}\r\n                                   onChange={onMainPhotoSelected}/>\r\n                            <img className={ProfileInfoCss.profileImg} alt=\"avatarProfile\"\r\n                                 src={profile.photos.large || nonProfileImg}/>\r\n                        </label>\r\n                        :\r\n                        <img alt=\"avatarProfile\" src={profile.photos.large || nonProfileImg}/>\r\n                    }\r\n                </div>\r\n                {editMode ?\r\n                    <FormikProvider value={formik}>\r\n                        <ProfileDataForm profile={profile} setEditMode={setEditMode}></ProfileDataForm>\r\n                    </FormikProvider>\r\n                    :\r\n                    <ProfileData profile={profile}></ProfileData>\r\n                }\r\n                <ProfileStatus status={status} isOwner={isOwner}\r\n                               updateStatus={updateStatus}></ProfileStatus>\r\n                {(isOwner && !editMode) && <button onClick={() => {\r\n                    setEditMode(true);\r\n                }}>Edit</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__I7V0T\",\"postList\":\"MyPosts_postList__aMUU1\",\"postEnterText\":\"MyPosts_postEnterText__0UJzf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__nW+I8\"};","import PostModule from \"./Post.module.css\"\r\nimport nonProfileImg from \"@assets/img/noProfilePictureIcon.png\"\r\n\r\nexport function Post(props) {\r\n    return (\r\n        <div className={PostModule.item}>\r\n            <img alt=\"Avatar\"\r\n                 src={props.profilePhoto || nonProfileImg}/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import Posts from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport React from 'react';\r\nimport {PostSmtFormFormik} from \"../../common/PostSmtForm/PostSmtFormFormik\";\r\n\r\n// window.props = [];\r\n\r\nexport const MyPosts = React.memo(props => {\r\n\r\n    // window.props.push(props);\r\n    let postsElements = props.postsData.map((p) => {\r\n        return (<Post key={p.id} message={p.message} likesCount={p.likesCount} profilePhoto={props.profilePhoto}></Post>)\r\n    })\r\n\r\n    return (\r\n        <div className={Posts.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostSmtFormFormik></PostSmtFormFormik>\r\n            </div>\r\n            <div className={Posts.postList}>\r\n                {postsElements}\r\n            </div>\r\n        </div>);\r\n});\r\n","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {Formik} from \"formik\";\r\nimport {PostSchema} from \"../../Utils/Validators/validators\";\r\n\r\nexport function MyPostContainer(props) {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                newTextBody: ''\r\n            }}\r\n            validationSchema={PostSchema}\r\n            onSubmit={\r\n                (values) => {\r\n                    props.addPost(values.newTextBody);\r\n                    values.newTextBody = '';\r\n                }\r\n            }\r\n        >\r\n            <MyPosts {...props}></MyPosts>\r\n        </Formik>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        profilePhoto: state.profilePage.profile.photos.small\r\n    };\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPost) => {\r\n            dispatch(addPostActionCreator(newPost));\r\n        },\r\n    };\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPostContainer);","import {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Preloader from \"../common/preLoader/preloader\";\r\n\r\nexport function Profile(props) {\r\n\r\n    if (props.isOwner && !props.isAuth) {\r\n        return (<Navigate to={\"/login\"}></Navigate>);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!props.profile ? <Preloader></Preloader> :\r\n                <>\r\n                    <ProfileInfo profile={props.profile} status={props.status} isOwner={props.isOwner}\r\n                                 updateStatus={props.updateStatus} savePhoto={props.savePhoto}\r\n                                 saveProfile={props.saveProfile}></ProfileInfo>\r\n                    <MyPostsContainer></MyPostsContainer>\r\n                </>}\r\n        </div>);\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nfunction ProfileContainer(props) {\r\n    const navigate = useNavigate()\r\n    const params = useParams();\r\n\r\n    let userId = params[\"userId\"];\r\n    if (!userId) {\r\n        userId = props.authorizedUserId;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            navigate(\"/login\");\r\n        } else {\r\n            props.getUserProfile(userId);\r\n            props.getStatus(userId);\r\n        }\r\n    }, [userId]);\r\n\r\n    return (\r\n        <div>\r\n            <Profile isAuth={props.isAuth} profile={props.profile} status={props.status}\r\n                     isOwner={!params[\"userId\"]} updateStatus={props.updateStatus} savePhoto={props.savePhoto}\r\n                     saveProfile={props.saveProfile}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n}))(ProfileContainer); //, withAuthRedirect","import * as Yup from 'yup';\r\n\r\nexport const LoginErrorSchema = Yup.object().shape({\r\n    email: Yup.string().email('Invalid email').required('Required email'),\r\n    password: Yup.string().required('Required password'),\r\n    captcha: Yup.string().when(\"captchaUrl\", {\r\n        is: true,\r\n        then: Yup.string().required(\"Required captcha symbols\")\r\n    })\r\n});\r\n\r\nexport const PostSchema = Yup.object().shape({\r\n    newTextBody: Yup.string()\r\n        .max(100, 'Too Long!')\r\n        .required('Required')\r\n});\r\n\r\nexport const MessageSchema = Yup.object().shape({\r\n    newTextBody: Yup.string()\r\n        .required('Required')\r\n});\r\n\r\n// export const WebSiteSchema = Yup.object().shape({\r\n//     contacts: Yup.object().shape({\r\n//         facebook: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         website: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         vk: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         twitter: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         instagram: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         youtube: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         github: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         mainLink: Yup.string().url(\"Wrong url!\").nullable(),\r\n//     })\r\n// });\r\n\r\nexport const WebSiteSchema = Yup.object().shape({\r\n        facebook: Yup.string().url(\"Wrong url!\").nullable(),\r\n        website: Yup.string().url(\"Wrong url!\").nullable(),\r\n        vk: Yup.string().url(\"Wrong url!\").nullable(),\r\n        twitter: Yup.string().url(\"Wrong url!\").nullable(),\r\n        instagram: Yup.string().url(\"Wrong url!\").nullable(),\r\n        youtube: Yup.string().url(\"Wrong url!\").nullable(),\r\n        github: Yup.string().url(\"Wrong url!\").nullable(),\r\n        mainLink: Yup.string().url(\"Wrong url!\").nullable(),\r\n});","// extracted by mini-css-extract-plugin\nexport default {\"sendMessageBox\":\"PostSmtFormCss_sendMessageBox__CaGjP\"};","import PostSmtCss from \"./PostSmtFormCss.module.css\"\r\nimport React from \"react\";\r\nimport {Field, Form, useFormikContext} from \"formik\";\r\n\r\nexport function PostSmtFormFormik() {\r\n\r\n    const formik = useFormikContext();\r\n\r\n    let hasError = formik.touched.newTextBody && formik.errors.newTextBody;\r\n    return (\r\n        <div className={PostSmtCss.sendMessageBox}>\r\n            <Form>\r\n                <Field\r\n                    type=\"textarea\"\r\n                    id=\"newTextBody\"\r\n                    name=\"newTextBody\"\r\n                    placeholder=\"Enter your message\"\r\n                    component=\"textarea\"\r\n                />\r\n                {hasError ? <div>{formik.errors.newTextBody}</div> : null}\r\n                <button type=\"submit\">Send</button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}","import {Field} from \"formik\";\r\n\r\nexport const createField = (type, id, name, placeholder, component, value) => {\r\n    let checked;\r\n    if (type === \"checkbox\") {\r\n        checked = value;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Field type={type}\r\n                   id={id}\r\n                   name={name}\r\n                   placeholder={placeholder}\r\n                   value={value || \"\"}\r\n                   checked={checked}\r\n                   component={component}/>\r\n        </div>\r\n);\r\n}"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsx","children","isOwner","onChange","e","currentTarget","value","autoFocus","onBlur","_deactivateEditMode","updateStatus","_jsxs","onDoubleClick","_activateEditMode","_ref","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","entries","contacts","map","_ref2","contactTitle","contactValue","className","ProfileInfoCss","contact","formik","useFormikContext","apiErrors","errors","item","index","onSubmit","handleSubmit","htmlFor","createField","values","ProfileDataCss","type","ProfileInfo","savePhoto","saveProfile","useFormik","initialValues","validationSchema","WebSiteSchema","async","submitProps","profileData","Preloader","descriptionBlock","avatarEditable","role","title","accept","style","display","target","files","length","profileImg","alt","src","photos","large","nonProfileImg","FormikProvider","ProfileDataForm","ProfileData","ProfileStatus","onClick","Post","PostModule","profilePhoto","message","likesCount","MyPosts","React","postsElements","postsData","p","id","Posts","PostSmtFormFormik","MyPostsContainer","connect","state","profilePage","small","dispatch","addPost","newPost","addPostActionCreator","Formik","newTextBody","PostSchema","Profile","isAuth","Navigate","to","_Fragment","compose","authorizedUserId","auth","userId","getUserProfile","getStatus","navigate","useNavigate","params","useParams","LoginErrorSchema","Yup","shape","email","required","password","captcha","when","is","then","max","MessageSchema","facebook","url","nullable","website","vk","twitter","instagram","youtube","github","mainLink","hasError","touched","PostSmtCss","sendMessageBox","Form","Field","name","placeholder","component","checked"],"sourceRoot":""}