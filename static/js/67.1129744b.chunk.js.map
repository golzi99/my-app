{"version":3,"file":"static/js/67.1129744b.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","webpack://my-app/./src/components/Dialogs/Message/Messages.module.css?68fa","components/Dialogs/Message/MyMessage.jsx","components/Dialogs/Message/OtherMessage.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx","components/Utils/Validators/validators.js","webpack://my-app/./src/components/common/PostSmtForm/PostSmtFormCss.module.css?c58e","components/common/PostSmtForm/PostSmtFormFormik.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__rxG43\",\"dialogsItems\":\"Dialogs_dialogsItems__dAHdH\",\"item\":\"Dialogs_item__TWkCd\",\"active\":\"Dialogs_active__ROeba\",\"messages\":\"Dialogs_messages__CtKjq\",\"sendMessageBox\":\"Dialogs_sendMessageBox__rquo+\"};","import DialogsCss from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport nonProfileImg from \"@assets/img/noProfilePictureIcon.png\"\r\n\r\nexport function DialogItem(props) {\r\n    let path = `/dialogs/${props.id}`;\r\n\r\n    const SelectedLink = () => {\r\n        return (\r\n            select => select.isActive ? DialogsCss.active : DialogsCss.item\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={`${DialogsCss.item}`}>\r\n            <NavLink to={path} className={SelectedLink()}>\r\n                <img\r\n                    alt=\"Avatar\"\r\n                    src={nonProfileImg}/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>);\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"myMessage\":\"Messages_myMessage__fWnB8\",\"otherMessage\":\"Messages_otherMessage__JNwu+\"};","import MessagesCss from \"./Messages.module.css\"\r\nimport nonProfileImg from \"@assets/img/noProfilePictureIcon.png\"\r\n\r\nexport function MyMessage(props) {\r\n    return (\r\n        <div className={MessagesCss.myMessage}>\r\n            {props.textMessage}\r\n            <img alt=\"avatar\" src={nonProfileImg}/>\r\n        </div>\r\n    );\r\n}","import MessagesCss from \"./Messages.module.css\"\r\nimport nonProfileImg from \"@assets/img/noProfilePictureIcon.png\"\r\n\r\nexport function OtherMessage(props) {\r\n\r\n    return (\r\n        <div className={MessagesCss.otherMessage}>\r\n            <img alt=\"avatar\" src={nonProfileImg}/>\r\n            {props.textMessage}\r\n        </div>\r\n    );\r\n}","import DialogsCss from \"./Dialogs.module.css\"\r\nimport React from \"react\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {MyMessage} from \"./Message/MyMessage\";\r\nimport {OtherMessage} from \"./Message/OtherMessage\";\r\nimport {PostSmtFormFormik} from \"../common/PostSmtForm/PostSmtFormFormik\";\r\n\r\n\r\nexport const Dialogs = React.memo(props => {\r\n\r\n    let id = 0;\r\n    let dialogsElements = props.dialogsData.map(\r\n        (d) => {\r\n            return <DialogItem key={d.id} name={d.name} id={d.id}></DialogItem>;\r\n        }\r\n    );\r\n\r\n    let messagesElements = props.messagesData.map(\r\n        (m) => {\r\n            id++;\r\n            if (m.id === 0) {\r\n                return (<MyMessage key={id} textMessage={m.message}></MyMessage>);\r\n            } else {\r\n                return (<OtherMessage key={id} textMessage={m.message}></OtherMessage>);\r\n            }\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div className={DialogsCss.dialogs}>\r\n            <div className={DialogsCss.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={DialogsCss.messages}>\r\n                {messagesElements}\r\n                <PostSmtFormFormik></PostSmtFormFormik>\r\n            </div>\r\n        </div>);\r\n});","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    function RedirectComponent(props) {\r\n        if (!props.isAuth) {\r\n            return <Navigate to=\"/login\"></Navigate>\r\n        }\r\n        return <Component {...props}></Component>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n}","import {sendMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {Formik} from \"formik\";\r\nimport {MessageSchema} from \"../Utils/Validators/validators\";\r\n\r\nfunction DialogsContainer(props) {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                newTextBody: ''\r\n            }}\r\n            validationSchema={MessageSchema}\r\n            onSubmit={\r\n                (values) => {\r\n                    props.sendNewMessage(values.newTextBody);\r\n                    values.newTextBody = '';\r\n                }\r\n            }\r\n        >\r\n                <Dialogs {...props}></Dialogs>\r\n        </Formik>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogsData,\r\n        messagesData: state.dialogsPage.messagesData,\r\n    };\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendNewMessage: (newMessage) => {\r\n            dispatch(sendMessageActionCreator(newMessage));\r\n        },\r\n    };\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(DialogsContainer);","import * as Yup from 'yup';\r\n\r\nexport const LoginErrorSchema = Yup.object().shape({\r\n    email: Yup.string().email('Invalid email').required('Required email'),\r\n    password: Yup.string().required('Required password'),\r\n    captcha: Yup.string().when(\"captchaUrl\", {\r\n        is: true,\r\n        then: Yup.string().required(\"Required captcha symbols\")\r\n    })\r\n});\r\n\r\nexport const PostSchema = Yup.object().shape({\r\n    newTextBody: Yup.string()\r\n        .max(100, 'Too Long!')\r\n        .required('Required')\r\n});\r\n\r\nexport const MessageSchema = Yup.object().shape({\r\n    newTextBody: Yup.string()\r\n        .required('Required')\r\n});\r\n\r\n// export const WebSiteSchema = Yup.object().shape({\r\n//     contacts: Yup.object().shape({\r\n//         facebook: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         website: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         vk: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         twitter: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         instagram: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         youtube: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         github: Yup.string().url(\"Wrong url!\").nullable(),\r\n//         mainLink: Yup.string().url(\"Wrong url!\").nullable(),\r\n//     })\r\n// });\r\n\r\nexport const WebSiteSchema = Yup.object().shape({\r\n        facebook: Yup.string().url(\"Wrong url!\").nullable(),\r\n        website: Yup.string().url(\"Wrong url!\").nullable(),\r\n        vk: Yup.string().url(\"Wrong url!\").nullable(),\r\n        twitter: Yup.string().url(\"Wrong url!\").nullable(),\r\n        instagram: Yup.string().url(\"Wrong url!\").nullable(),\r\n        youtube: Yup.string().url(\"Wrong url!\").nullable(),\r\n        github: Yup.string().url(\"Wrong url!\").nullable(),\r\n        mainLink: Yup.string().url(\"Wrong url!\").nullable(),\r\n});","// extracted by mini-css-extract-plugin\nexport default {\"sendMessageBox\":\"PostSmtFormCss_sendMessageBox__CaGjP\"};","import PostSmtCss from \"./PostSmtFormCss.module.css\"\r\nimport React from \"react\";\r\nimport {Field, Form, useFormikContext} from \"formik\";\r\n\r\nexport function PostSmtFormFormik() {\r\n\r\n    const formik = useFormikContext();\r\n\r\n    let hasError = formik.touched.newTextBody && formik.errors.newTextBody;\r\n    return (\r\n        <div className={PostSmtCss.sendMessageBox}>\r\n            <Form>\r\n                <Field\r\n                    type=\"textarea\"\r\n                    id=\"newTextBody\"\r\n                    name=\"newTextBody\"\r\n                    placeholder=\"Enter your message\"\r\n                    component=\"textarea\"\r\n                />\r\n                {hasError ? <div>{formik.errors.newTextBody}</div> : null}\r\n                <button type=\"submit\">Send</button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}"],"names":["DialogItem","props","path","concat","id","_jsx","className","DialogsCss","children","_jsxs","NavLink","to","select","isActive","alt","src","nonProfileImg","name","MyMessage","MessagesCss","textMessage","OtherMessage","Dialogs","React","dialogsElements","dialogsData","map","d","messagesElements","messagesData","m","message","PostSmtFormFormik","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendNewMessage","newMessage","sendMessageActionCreator","Component","Navigate","Formik","initialValues","newTextBody","validationSchema","MessageSchema","onSubmit","values","LoginErrorSchema","Yup","shape","email","required","password","captcha","when","is","then","PostSchema","max","WebSiteSchema","facebook","url","nullable","website","vk","twitter","instagram","youtube","github","mainLink","formik","useFormikContext","hasError","touched","errors","PostSmtCss","sendMessageBox","Form","Field","type","placeholder","component"],"sourceRoot":""}